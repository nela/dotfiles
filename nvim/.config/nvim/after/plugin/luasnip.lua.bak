-- local has = function(x)
--
--   return vim.fn.has(x) == 1
-- end
--
-- local from_vs = require'luasnip/loaders/from_vscode'
--
-- if has('mac') then
--   from_vs.load({ paths = {'~/projects/friendly-snippets'} })
-- else
--   from_vs.load()
-- end
-- local function prequire(...)
-- local status, lib = pcall(require, ...)
-- if (status) then return lib end
--     return nil
-- end

-- if vim.g.snippets ~= "luasnip" or not pcall(require, "luasnip") then
--   return
-- end
--

local ls = require "luasnip"
local types = require "luasnip.util.types"

ls.config.set_config {
  -- This tells LuaSnip to remember to keep around the last snippet.
  -- You can jump back into it even if you move outside of the selection
  history = true,

  -- This one is cool cause if you have dynamic snippets, it updates as you type!
  updateevents = "TextChanged,TextChangedI",

  -- Autosnippets:
  enable_autosnippets = true,

  -- Crazy highlights!!
  -- #vid3
  -- ext_opts = nil,
  ext_opts = {
    [types.choiceNode] = {
      active = {
        virt_text = { { " <- Current Choice", "NonTest" } },
      },
    },
  },
}

-- local t = function(str)
--     return vim.api.nvim_replace_termcodes(str, true, true, true)
-- end

-- local check_back_space = function()
--     local col = vim.fn.col('.') - 1
--     if col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') then
--         return true
--     else
--         return false
--     end
-- end
--
-- _G.tab_complete = function()
--     if luasnip and luasnip.expand_or_jumpable() then
--         return t('<Plug>luasnip-expand-or-jump')
--     else check_back_space()
--         return t('<Tab>')
--     end
--     return ''
-- end
--
-- _G.s_tab_complete = function()
--     if luasnip and luasnip.jumpable(-1) then
--         return t('<Plug>luasnip-jump-prev')
--     else
--         return t('<S-Tab>')
--     end
--     return ''
-- end



vim.keymap.set({"i", "s"}, "<c-k>", function ()
    print('insike')
    if ls.expand_or_jumpable() then
      print('2')
        ls.expand_or_jump()
    end
end, { silent = false})

-- km({"i", "s"}, "<C-j>", function()
--     if ls.jumpable(-1) then
--         ls.jump(-1)
--     end
-- end, { silent = true })
--
-- km("i", "<C-l>", function()
--     if ls.choice_active() then
--         ls.change_choice(1)
--     end
-- end)
--

-- vim.keymap.set("n", "<leader>l", "<cmd>source ~/.config/nvim/after/plugin/luasnip.lua<CR>")

ls.snippets = {
    all = {
        ls.parser.parse_snippet("expand", "--this is what was expanded")
    },
    lua = { },
}

-- vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("s", "<Tab>", "v:lua.tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("i", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("s", "<S-Tab>", "v:lua.s_tab_complete()", {expr = true})
-- vim.api.nvim_set_keymap("i", "<C-E>", "<Plug>luasnip-next-choice", {})
-- vim.api.nvim_set_keymap("s", "<C-E>", "<Plug>luasnip-next-choice", {})
